diff --git a/../steps/17_vertex_input/main.go b/../steps/18_vertex_buffer/main.go
index 84e3c8d..f858178 100644
--- a/../steps/17_vertex_input/main.go
+++ b/../steps/18_vertex_buffer/main.go
@@ -1,7 +1,9 @@
 package main
 
 import (
+	"bytes"
 	"embed"
+	"encoding/binary"
 	"github.com/pkg/errors"
 	"github.com/veandco/go-sdl2/sdl"
 	"github.com/vkngwrapper/core/v2"
@@ -116,6 +118,9 @@ type HelloTriangleApplication struct {
 	inFlightFence           []core1_0.Fence
 	imagesInFlight          []core1_0.Fence
 	currentFrame            int
+
+	vertexBuffer       core1_0.Buffer
+	vertexBufferMemory core1_0.DeviceMemory
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -208,6 +213,11 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
+	err = app.createVertexBuffer()
+	if err != nil {
+		return err
+	}
+
 	err = app.createCommandBuffers()
 	if err != nil {
 		return err
@@ -294,6 +304,14 @@ func (app *HelloTriangleApplication) cleanupSwapChain() {
 func (app *HelloTriangleApplication) cleanup() {
 	app.cleanupSwapChain()
 
+	if app.vertexBuffer != nil {
+		app.vertexBuffer.Destroy(nil)
+	}
+
+	if app.vertexBufferMemory != nil {
+		app.vertexBufferMemory.Free(nil)
+	}
+
 	for _, fence := range app.inFlightFence {
 		fence.Destroy(nil)
 	}
@@ -879,6 +897,69 @@ func (app *HelloTriangleApplication) createCommandPool() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) createVertexBuffer() error {
+	var err error
+	bufferSize := binary.Size(vertices)
+	app.vertexBuffer, _, err = app.device.CreateBuffer(nil, core1_0.BufferCreateInfo{
+		Size:        bufferSize,
+		Usage:       core1_0.BufferUsageVertexBuffer,
+		SharingMode: core1_0.SharingModeExclusive,
+	})
+	if err != nil {
+		return err
+	}
+
+	memRequirements := app.vertexBuffer.MemoryRequirements()
+	memoryTypeIndex, err := app.findMemoryType(memRequirements.MemoryTypeBits, core1_0.MemoryPropertyHostVisible|core1_0.MemoryPropertyHostCoherent)
+	if err != nil {
+		return err
+	}
+
+	app.vertexBufferMemory, _, err = app.device.AllocateMemory(nil, core1_0.MemoryAllocateInfo{
+		AllocationSize:  memRequirements.Size,
+		MemoryTypeIndex: memoryTypeIndex,
+	})
+	if err != nil {
+		return err
+	}
+
+	_, err = app.vertexBuffer.BindBufferMemory(app.vertexBufferMemory, 0)
+	if err != nil {
+		return err
+	}
+
+	memory, _, err := app.vertexBufferMemory.Map(0, bufferSize, 0)
+	if err != nil {
+		return err
+	}
+	defer app.vertexBufferMemory.Unmap()
+
+	dataBuffer := unsafe.Slice((*byte)(memory), bufferSize)
+
+	buf := &bytes.Buffer{}
+	err = binary.Write(buf, common.ByteOrder, vertices)
+	if err != nil {
+		return err
+	}
+
+	copy(dataBuffer, buf.Bytes())
+
+	return nil
+}
+
+func (app *HelloTriangleApplication) findMemoryType(typeFilter uint32, properties core1_0.MemoryPropertyFlags) (int, error) {
+	memProperties := app.physicalDevice.MemoryProperties()
+	for i, memoryType := range memProperties.MemoryTypes {
+		typeBit := uint32(1 << i)
+
+		if (typeFilter&typeBit) != 0 && (memoryType.PropertyFlags&properties) == properties {
+			return i, nil
+		}
+	}
+
+	return 0, errors.New("failed to find any suitable memory type!")
+}
+
 func (app *HelloTriangleApplication) createCommandBuffers() error {
 
 	buffers, _, err := app.device.AllocateCommandBuffers(core1_0.CommandBufferAllocateInfo{
@@ -914,7 +995,8 @@ func (app *HelloTriangleApplication) createCommandBuffers() error {
 		}
 
 		buffer.CmdBindPipeline(core1_0.PipelineBindPointGraphics, app.graphicsPipeline)
-		buffer.CmdDraw(3, 1, 0, 0)
+		buffer.CmdBindVertexBuffers(0, []core1_0.Buffer{app.vertexBuffer}, []int{0})
+		buffer.CmdDraw(len(vertices), 1, 0, 0)
 		buffer.CmdEndRenderPass()
 
 		_, err = buffer.End()
