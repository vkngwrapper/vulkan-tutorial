diff --git a/../steps/23_texture_image/main.go b/../steps/24_sampler/main.go
index f0f4c23..f1f0d5a 100644
--- a/../steps/23_texture_image/main.go
+++ b/../steps/24_sampler/main.go
@@ -4,11 +4,6 @@ import (
 	"bytes"
 	"embed"
 	"encoding/binary"
-	"image/png"
-	"log"
-	"math"
-	"unsafe"
-
 	"github.com/loov/hrtime"
 	"github.com/pkg/errors"
 	"github.com/veandco/go-sdl2/sdl"
@@ -22,6 +17,10 @@ import (
 	"github.com/vkngwrapper/extensions/v2/khr_swapchain"
 	vkng_sdl2 "github.com/vkngwrapper/integrations/sdl2/v2"
 	vkngmath "github.com/vkngwrapper/math"
+	"image/png"
+	"log"
+	"math"
+	"unsafe"
 )
 
 //go:embed shaders images
@@ -147,6 +146,8 @@ type HelloTriangleApplication struct {
 
 	textureImage       core1_0.Image
 	textureImageMemory core1_0.DeviceMemory
+	textureImageView   core1_0.ImageView
+	textureSampler     core1_0.Sampler
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -249,6 +250,16 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
+	err = app.createTextureImageView()
+	if err != nil {
+		return err
+	}
+
+	err = app.createSampler()
+	if err != nil {
+		return err
+	}
+
 	err = app.createVertexBuffer()
 	if err != nil {
 		return err
@@ -372,6 +383,14 @@ func (app *HelloTriangleApplication) cleanupSwapChain() {
 func (app *HelloTriangleApplication) cleanup() {
 	app.cleanupSwapChain()
 
+	if app.textureSampler != nil {
+		app.textureSampler.Destroy(nil)
+	}
+
+	if app.textureImageView != nil {
+		app.textureImageView.Destroy(nil)
+	}
+
 	if app.textureImage != nil {
 		app.textureImage.Destroy(nil)
 	}
@@ -658,8 +677,10 @@ func (app *HelloTriangleApplication) createLogicalDevice() error {
 	}
 
 	app.device, _, err = app.physicalDevice.CreateDevice(nil, core1_0.DeviceCreateInfo{
-		QueueCreateInfos:      queueFamilyOptions,
-		EnabledFeatures:       &core1_0.PhysicalDeviceFeatures{},
+		QueueCreateInfos: queueFamilyOptions,
+		EnabledFeatures: &core1_0.PhysicalDeviceFeatures{
+			SamplerAnisotropy: true,
+		},
 		EnabledExtensionNames: extensionNames,
 	})
 	if err != nil {
@@ -738,24 +759,7 @@ func (app *HelloTriangleApplication) createImageViews() error {
 
 	var imageViews []core1_0.ImageView
 	for _, image := range images {
-		view, _, err := app.device.CreateImageView(nil, core1_0.ImageViewCreateInfo{
-			ViewType: core1_0.ImageViewType2D,
-			Image:    image,
-			Format:   app.swapchainImageFormat,
-			Components: core1_0.ComponentMapping{
-				R: core1_0.ComponentSwizzleIdentity,
-				G: core1_0.ComponentSwizzleIdentity,
-				B: core1_0.ComponentSwizzleIdentity,
-				A: core1_0.ComponentSwizzleIdentity,
-			},
-			SubresourceRange: core1_0.ImageSubresourceRange{
-				AspectMask:     core1_0.ImageAspectColor,
-				BaseMipLevel:   0,
-				LevelCount:     1,
-				BaseArrayLayer: 0,
-				LayerCount:     1,
-			},
-		})
+		view, err := app.createImageView(image, app.swapchainImageFormat)
 		if err != nil {
 			return err
 		}
@@ -1081,6 +1085,52 @@ func (app *HelloTriangleApplication) createTextureImage() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) createTextureImageView() error {
+	var err error
+	app.textureImageView, err = app.createImageView(app.textureImage, core1_0.FormatR8G8B8A8SRGB)
+	return err
+}
+
+func (app *HelloTriangleApplication) createSampler() error {
+	properties, err := app.physicalDevice.Properties()
+	if err != nil {
+		return err
+	}
+
+	app.textureSampler, _, err = app.device.CreateSampler(nil, core1_0.SamplerCreateInfo{
+		MagFilter:    core1_0.FilterLinear,
+		MinFilter:    core1_0.FilterLinear,
+		AddressModeU: core1_0.SamplerAddressModeRepeat,
+		AddressModeV: core1_0.SamplerAddressModeRepeat,
+		AddressModeW: core1_0.SamplerAddressModeRepeat,
+
+		AnisotropyEnable: true,
+		MaxAnisotropy:    properties.Limits.MaxSamplerAnisotropy,
+
+		BorderColor: core1_0.BorderColorIntOpaqueBlack,
+
+		MipmapMode: core1_0.SamplerMipmapModeLinear,
+	})
+
+	return err
+}
+
+func (app *HelloTriangleApplication) createImageView(image core1_0.Image, format core1_0.Format) (core1_0.ImageView, error) {
+	imageView, _, err := app.device.CreateImageView(nil, core1_0.ImageViewCreateInfo{
+		Image:    image,
+		ViewType: core1_0.ImageViewType2D,
+		Format:   format,
+		SubresourceRange: core1_0.ImageSubresourceRange{
+			AspectMask:     core1_0.ImageAspectColor,
+			BaseMipLevel:   0,
+			LevelCount:     1,
+			BaseArrayLayer: 0,
+			LayerCount:     1,
+		},
+	})
+	return imageView, err
+}
+
 func (app *HelloTriangleApplication) createImage(width, height int, format core1_0.Format, tiling core1_0.ImageTiling, usage core1_0.ImageUsageFlags, memoryProperties core1_0.MemoryPropertyFlags) (core1_0.Image, core1_0.DeviceMemory, error) {
 	image, _, err := app.device.CreateImage(nil, core1_0.ImageCreateInfo{
 		ImageType: core1_0.ImageType2D,
@@ -1695,7 +1745,8 @@ func (app *HelloTriangleApplication) isDeviceSuitable(device core1_0.PhysicalDev
 		swapChainAdequate = len(swapChainSupport.Formats) > 0 && len(swapChainSupport.PresentModes) > 0
 	}
 
-	return indices.IsComplete() && extensionsSupported && swapChainAdequate
+	features := device.Features()
+	return indices.IsComplete() && extensionsSupported && swapChainAdequate && features.SamplerAnisotropy
 }
 
 func (app *HelloTriangleApplication) checkDeviceExtensionSupport(device core1_0.PhysicalDevice) bool {
