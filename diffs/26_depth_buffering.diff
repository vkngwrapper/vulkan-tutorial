diff --git a/../steps/25_texture_mapping/main.go b/../steps/26_depth_buffering/main.go
index ef55839..54a71f4 100644
--- a/../steps/25_texture_mapping/main.go
+++ b/../steps/26_depth_buffering/main.go
@@ -49,7 +49,7 @@ type SwapChainSupportDetails struct {
 }
 
 type Vertex struct {
-	Position vkngmath.Vec2[float32]
+	Position vkngmath.Vec3[float32]
 	Color    vkngmath.Vec3[float32]
 	TexCoord vkngmath.Vec2[float32]
 }
@@ -96,13 +96,21 @@ func getVertexAttributeDescriptions() []core1_0.VertexInputAttributeDescription
 }
 
 var vertices = []Vertex{
-	{Position: vkngmath.Vec2[float32]{X: -0.5, Y: -0.5}, Color: vkngmath.Vec3[float32]{X: 1, Y: 0, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 0}},
-	{Position: vkngmath.Vec2[float32]{X: 0.5, Y: -0.5}, Color: vkngmath.Vec3[float32]{X: 0, Y: 1, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 0}},
-	{Position: vkngmath.Vec2[float32]{X: 0.5, Y: 0.5}, Color: vkngmath.Vec3[float32]{X: 0, Y: 0, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 1}},
-	{Position: vkngmath.Vec2[float32]{X: -0.5, Y: 0.5}, Color: vkngmath.Vec3[float32]{X: 1, Y: 1, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 1}},
+	{Position: vkngmath.Vec3[float32]{X: -0.5, Y: -0.5, Z: 0}, Color: vkngmath.Vec3[float32]{X: 1, Y: 0, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 0}},
+	{Position: vkngmath.Vec3[float32]{X: 0.5, Y: -0.5, Z: 0}, Color: vkngmath.Vec3[float32]{X: 0, Y: 1, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 0}},
+	{Position: vkngmath.Vec3[float32]{X: 0.5, Y: 0.5, Z: 0}, Color: vkngmath.Vec3[float32]{X: 0, Y: 0, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 1}},
+	{Position: vkngmath.Vec3[float32]{X: -0.5, Y: 0.5, Z: 0}, Color: vkngmath.Vec3[float32]{X: 1, Y: 1, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 1}},
+
+	{Position: vkngmath.Vec3[float32]{X: -0.5, Y: -0.5, Z: -0.5}, Color: vkngmath.Vec3[float32]{X: 1, Y: 0, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 0}},
+	{Position: vkngmath.Vec3[float32]{X: 0.5, Y: -0.5, Z: -0.5}, Color: vkngmath.Vec3[float32]{X: 0, Y: 1, Z: 0}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 0}},
+	{Position: vkngmath.Vec3[float32]{X: 0.5, Y: 0.5, Z: -0.5}, Color: vkngmath.Vec3[float32]{X: 0, Y: 0, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 1, Y: 1}},
+	{Position: vkngmath.Vec3[float32]{X: -0.5, Y: 0.5, Z: -0.5}, Color: vkngmath.Vec3[float32]{X: 1, Y: 1, Z: 1}, TexCoord: vkngmath.Vec2[float32]{X: 0, Y: 1}},
 }
 
-var indices = []uint16{0, 1, 2, 2, 3, 0}
+var indices = []uint16{
+	0, 1, 2, 2, 3, 0,
+	4, 5, 6, 6, 7, 4,
+}
 
 type HelloTriangleApplication struct {
 	window *sdl.Window
@@ -155,6 +163,10 @@ type HelloTriangleApplication struct {
 	textureImageMemory core1_0.DeviceMemory
 	textureImageView   core1_0.ImageView
 	textureSampler     core1_0.Sampler
+
+	depthImage       core1_0.Image
+	depthImageMemory core1_0.DeviceMemory
+	depthImageView   core1_0.ImageView
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -242,12 +254,17 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
-	err = app.createFramebuffers()
+	err = app.createCommandPool()
 	if err != nil {
 		return err
 	}
 
-	err = app.createCommandPool()
+	err = app.createDepthResources()
+	if err != nil {
+		return err
+	}
+
+	err = app.createFramebuffers()
 	if err != nil {
 		return err
 	}
@@ -339,6 +356,21 @@ appLoop:
 }
 
 func (app *HelloTriangleApplication) cleanupSwapChain() {
+	if app.depthImageView != nil {
+		app.depthImageView.Destroy(nil)
+		app.depthImageView = nil
+	}
+
+	if app.depthImage != nil {
+		app.depthImage.Destroy(nil)
+		app.depthImage = nil
+	}
+
+	if app.depthImageMemory != nil {
+		app.depthImageMemory.Free(nil)
+		app.depthImageMemory = nil
+	}
+
 	for _, framebuffer := range app.swapchainFramebuffers {
 		framebuffer.Destroy(nil)
 	}
@@ -500,6 +532,11 @@ func (app *HelloTriangleApplication) recreateSwapChain() error {
 		return err
 	}
 
+	err = app.createDepthResources()
+	if err != nil {
+		return err
+	}
+
 	err = app.createFramebuffers()
 	if err != nil {
 		return err
@@ -766,7 +803,7 @@ func (app *HelloTriangleApplication) createImageViews() error {
 
 	var imageViews []core1_0.ImageView
 	for _, image := range images {
-		view, err := app.createImageView(image, app.swapchainImageFormat)
+		view, err := app.createImageView(image, app.swapchainImageFormat, core1_0.ImageAspectColor)
 		if err != nil {
 			return err
 		}
@@ -779,6 +816,11 @@ func (app *HelloTriangleApplication) createImageViews() error {
 }
 
 func (app *HelloTriangleApplication) createRenderPass() error {
+	depthFormat, err := app.findDepthFormat()
+	if err != nil {
+		return err
+	}
+
 	renderPass, _, err := app.device.CreateRenderPass(nil, core1_0.RenderPassCreateInfo{
 		Attachments: []core1_0.AttachmentDescription{
 			{
@@ -791,6 +833,16 @@ func (app *HelloTriangleApplication) createRenderPass() error {
 				InitialLayout:  core1_0.ImageLayoutUndefined,
 				FinalLayout:    khr_swapchain.ImageLayoutPresentSrc,
 			},
+			{
+				Format:         depthFormat,
+				Samples:        core1_0.Samples1,
+				LoadOp:         core1_0.AttachmentLoadOpClear,
+				StoreOp:        core1_0.AttachmentStoreOpDontCare,
+				StencilLoadOp:  core1_0.AttachmentLoadOpDontCare,
+				StencilStoreOp: core1_0.AttachmentStoreOpDontCare,
+				InitialLayout:  core1_0.ImageLayoutUndefined,
+				FinalLayout:    core1_0.ImageLayoutDepthStencilAttachmentOptimal,
+			},
 		},
 		Subpasses: []core1_0.SubpassDescription{
 			{
@@ -801,6 +853,10 @@ func (app *HelloTriangleApplication) createRenderPass() error {
 						Layout:     core1_0.ImageLayoutColorAttachmentOptimal,
 					},
 				},
+				DepthStencilAttachment: &core1_0.AttachmentReference{
+					Attachment: 1,
+					Layout:     core1_0.ImageLayoutDepthStencilAttachmentOptimal,
+				},
 			},
 		},
 		SubpassDependencies: []core1_0.SubpassDependency{
@@ -808,11 +864,11 @@ func (app *HelloTriangleApplication) createRenderPass() error {
 				SrcSubpass: core1_0.SubpassExternal,
 				DstSubpass: 0,
 
-				SrcStageMask:  core1_0.PipelineStageColorAttachmentOutput,
+				SrcStageMask:  core1_0.PipelineStageColorAttachmentOutput | core1_0.PipelineStageEarlyFragmentTests,
 				SrcAccessMask: 0,
 
-				DstStageMask:  core1_0.PipelineStageColorAttachmentOutput,
-				DstAccessMask: core1_0.AccessColorAttachmentWrite,
+				DstStageMask:  core1_0.PipelineStageColorAttachmentOutput | core1_0.PipelineStageEarlyFragmentTests,
+				DstAccessMask: core1_0.AccessColorAttachmentWrite | core1_0.AccessDepthStencilAttachmentWrite,
 			},
 		},
 	})
@@ -955,6 +1011,12 @@ func (app *HelloTriangleApplication) createGraphicsPipeline() error {
 		MinSampleShading:     1.0,
 	}
 
+	depthStencil := &core1_0.PipelineDepthStencilStateCreateInfo{
+		DepthTestEnable:  true,
+		DepthWriteEnable: true,
+		DepthCompareOp:   core1_0.CompareOpLess,
+	}
+
 	colorBlend := &core1_0.PipelineColorBlendStateCreateInfo{
 		LogicOpEnabled: false,
 		LogicOp:        core1_0.LogicOpCopy,
@@ -985,6 +1047,7 @@ func (app *HelloTriangleApplication) createGraphicsPipeline() error {
 			ViewportState:      viewport,
 			RasterizationState: rasterization,
 			MultisampleState:   multisample,
+			DepthStencilState:  depthStencil,
 			ColorBlendState:    colorBlend,
 			Layout:             app.pipelineLayout,
 			RenderPass:         app.renderPass,
@@ -1007,6 +1070,7 @@ func (app *HelloTriangleApplication) createFramebuffers() error {
 			Layers:     1,
 			Attachments: []core1_0.ImageView{
 				imageView,
+				app.depthImageView,
 			},
 			Width:  app.swapchainExtent.Width,
 			Height: app.swapchainExtent.Height,
@@ -1039,6 +1103,49 @@ func (app *HelloTriangleApplication) createCommandPool() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) createDepthResources() error {
+	depthFormat, err := app.findDepthFormat()
+	if err != nil {
+		return err
+	}
+
+	app.depthImage, app.depthImageMemory, err = app.createImage(app.swapchainExtent.Width,
+		app.swapchainExtent.Height,
+		depthFormat,
+		core1_0.ImageTilingOptimal,
+		core1_0.ImageUsageDepthStencilAttachment,
+		core1_0.MemoryPropertyDeviceLocal)
+	if err != nil {
+		return err
+	}
+	app.depthImageView, err = app.createImageView(app.depthImage, depthFormat, core1_0.ImageAspectDepth)
+	return err
+}
+
+func (app *HelloTriangleApplication) findSupportedFormat(formats []core1_0.Format, tiling core1_0.ImageTiling, features core1_0.FormatFeatureFlags) (core1_0.Format, error) {
+	for _, format := range formats {
+		props := app.physicalDevice.FormatProperties(format)
+
+		if tiling == core1_0.ImageTilingLinear && (props.LinearTilingFeatures&features) == features {
+			return format, nil
+		} else if tiling == core1_0.ImageTilingOptimal && (props.OptimalTilingFeatures&features) == features {
+			return format, nil
+		}
+	}
+
+	return 0, errors.Errorf("failed to find supported format for tiling %s, featureset %s", tiling, features)
+}
+
+func (app *HelloTriangleApplication) findDepthFormat() (core1_0.Format, error) {
+	return app.findSupportedFormat([]core1_0.Format{core1_0.FormatD32SignedFloat, core1_0.FormatD32SignedFloatS8UnsignedInt, core1_0.FormatD24UnsignedNormalizedS8UnsignedInt},
+		core1_0.ImageTilingOptimal,
+		core1_0.FormatFeatureDepthStencilAttachment)
+}
+
+func hasStencilComponent(format core1_0.Format) bool {
+	return format == core1_0.FormatD32SignedFloatS8UnsignedInt || format == core1_0.FormatD24UnsignedNormalizedS8UnsignedInt
+}
+
 func (app *HelloTriangleApplication) createTextureImage() error {
 	//Put image data into staging buffer
 	imageBytes, err := fileSystem.ReadFile("images/texture.png")
@@ -1101,7 +1208,7 @@ func (app *HelloTriangleApplication) createTextureImage() error {
 
 func (app *HelloTriangleApplication) createTextureImageView() error {
 	var err error
-	app.textureImageView, err = app.createImageView(app.textureImage, core1_0.FormatR8G8B8A8SRGB)
+	app.textureImageView, err = app.createImageView(app.textureImage, core1_0.FormatR8G8B8A8SRGB, core1_0.ImageAspectColor)
 	return err
 }
 
@@ -1129,13 +1236,13 @@ func (app *HelloTriangleApplication) createSampler() error {
 	return err
 }
 
-func (app *HelloTriangleApplication) createImageView(image core1_0.Image, format core1_0.Format) (core1_0.ImageView, error) {
+func (app *HelloTriangleApplication) createImageView(image core1_0.Image, format core1_0.Format, aspect core1_0.ImageAspectFlags) (core1_0.ImageView, error) {
 	imageView, _, err := app.device.CreateImageView(nil, core1_0.ImageViewCreateInfo{
 		Image:    image,
 		ViewType: core1_0.ImageViewType2D,
 		Format:   format,
 		SubresourceRange: core1_0.ImageSubresourceRange{
-			AspectMask:     core1_0.ImageAspectColor,
+			AspectMask:     aspect,
 			BaseMipLevel:   0,
 			LevelCount:     1,
 			BaseArrayLayer: 0,
@@ -1561,6 +1668,7 @@ func (app *HelloTriangleApplication) createCommandBuffers() error {
 				},
 				ClearValues: []core1_0.ClearValue{
 					core1_0.ClearValueFloat{0, 0, 0, 1},
+					core1_0.ClearValueDepthStencil{Depth: 1.0, Stencil: 0},
 				},
 			})
 		if err != nil {
@@ -1691,7 +1799,12 @@ func (app *HelloTriangleApplication) updateUniformBuffer(currentImage int) error
 		&vkngmath.Vec3[float32]{X: 0, Y: 0, Z: 1},
 	)
 	aspectRatio := float32(app.swapchainExtent.Width) / float32(app.swapchainExtent.Height)
-	ubo.Proj.SetPerspective(math.Pi/4.0, aspectRatio, 0.1, 10)
+
+	near := float32(0.1)
+	far := float32(10.0)
+	fovy := math.Pi / 4.0
+
+	ubo.Proj.SetPerspective(fovy, aspectRatio, near, far)
 
 	err := writeData(app.uniformBuffersMemory[currentImage], 0, &ubo)
 	return err
